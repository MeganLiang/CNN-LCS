#line 2 "lex.yy.cpp"
/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 90
#define YY_END_OF_BUFFER 91
static yyconst short int yy_accept[1540] =
    {   0,
        0,    0,   91,   89,   88,   88,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   88,    0,   87,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   32,    0,    0,
       39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   42,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   42,   42,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   43,    0,    0,    0,    0,    0,    3,    0,
        0,    0,    0,    0,   30,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   51,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   42,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   43,   43,    0,    0,    0,    0,
        0,    3,    3,    0,    0,    0,    0,    0,   30,   30,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   11,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   86,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    0,   38,    0,    0,    0,    0,    0,    0,
       43,    0,    0,    0,    0,    0,    3,    0,    0,    0,
        0,   33,   30,    0,   31,    0,    0,   34,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       48,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   33,   33,
        0,   31,   31,    0,    0,   34,   34,    0,    0,    0,
        0,    0,   44,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   41,    0,    0,   53,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   33,    0,   31,    0,
        0,   34,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
       41,   66,   27,   52,    0,   68,    0,    0,   49,    0,
        0,   54,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   40,   37,    0,    0,
       17,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   29,    0,
        0,   41,    0,   68,   68,   71,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
        0,    0,    2,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   55,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   28,    0,    0,   68,   71,   71,    0,    0,
       84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    2,    2,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   10,    0,    0,    0,   71,    0,    0,

        0,    0,    0,    0,    0,    0,   13,    0,    0,    0,
        0,   67,    0,    0,    0,   14,    0,    0,    0,    0,
        0,    0,    0,    2,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   14,
       14,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       35,    0,    0,    0,    0,    0,    0,    0,   18,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   12,
       85,    8,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   14,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   35,   35,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   63,    0,    0,
        0,    0,   70,   85,   85,    0,    0,    0,    0,    0,
       50,    0,    0,    7,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   35,    0,    0,    0,
        0,   76,    0,   22,    0,    0,    0,    0,    0,    0,
       63,   63,    0,    9,    0,    0,   70,   70,   85,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   16,
        0,    0,    0,    0,    0,    0,   78,    0,    0,   56,

       79,   75,   76,   76,   20,    0,    0,    0,    0,   73,
       63,    0,    0,    0,   70,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   16,   16,    0,    0,    0,
        0,    0,    0,   78,   78,    0,    0,   56,   56,   79,
       79,   75,   75,   76,   21,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   58,    0,    0,    0,
        0,    0,    0,    0,   16,    0,    0,    0,    0,    0,
        0,   78,    0,    0,   56,   79,   75,    0,    0,    0,
        0,   64,    0,   59,    0,    0,    0,    0,   58,   58,
        0,    0,    0,    0,    0,    0,    0,   15,    0,    0,

        0,    0,    0,    0,    0,   19,    0,    0,    0,   64,
       64,    0,    0,    0,    0,    0,   58,    0,    0,    0,
        0,    0,    0,    0,   15,   15,    0,    0,    0,    0,
        0,   23,   36,    0,    0,    0,   64,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   15,
        0,    0,    0,    0,    0,   23,   23,   36,   36,    0,
        0,    0,    0,    0,    0,   61,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   47,    0,    0,   23,
       36,    0,    0,    0,   80,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   57,    0,    0,    0,

        0,   74,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   72,   60,    0,    0,   83,
        0,    0,    0,    0,    0,    0,    0,   69,    0,    0,
        0,    0,    0,    0,    0,    0,    6,    5,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   24,   25,    0,    0,    0,    0,    0,    0,
        0,   25,   25,    0,    0,    0,    0,    0,    0,    0,
       25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       81,    0,    0,    0,    0,    0,   77,    0,   82,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   62,    0,    0,    0,
        0,    0,    0,    0,   26,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   45,    0,
        0,   65,    0,    0,    0,    0,    0,   46,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    6,    7,    1,    8,    8,    9,
        8,    8,    8,    8,    8,    8,    8,    1,    1,    1,
        1,    1,    1,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
        1,    1,    1,    1,    1,    1,   10,   11,   12,   13,

       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[36] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3
    } ;

static yyconst short int yy_base[1546] =
    {   0,
        0,    0, 1873, 1874,   34,   37, 1869,   29, 1841,   27,
       39,   25, 1852,   27,   33, 1842,   42,   43,   50,   56,
       54, 1844, 1839, 1848,   79, 1862, 1874, 1851, 1838, 1847,
     1847, 1850, 1828, 1834, 1844, 1832,   44, 1833, 1836, 1828,
       58, 1838, 1826, 1827,   70, 1835, 1844, 1814, 1825, 1821,
     1822, 1816, 1819, 1816,   48, 1817,   64, 1810, 1817, 1816,
     1812, 1825,   64, 1820, 1810, 1828, 1814, 1815, 1817, 1800,
     1813, 1798, 1815, 1809, 1813, 1804, 1796, 1791, 1805, 1789,
     1794, 1802, 1788, 1800, 1789, 1788, 1782, 1783,   80, 1805,
     1804, 1792, 1802, 1791, 1794,   80, 1792, 1779, 1788, 1786,

     1770, 1788, 1783, 1782, 1763, 1767, 1783, 1765, 1787, 1777,
     1762, 1778, 1773, 1766, 1757, 1757, 1755, 1778, 1777, 1750,
     1767, 1774, 1759, 1764, 1761, 1760, 1760, 1762, 1744, 1743,
     1742, 1750, 1757, 1753, 1731, 1741, 1751, 1744,   81, 1757,
       90, 1731, 1738, 1730, 1736, 1752, 1737, 1730, 1724, 1725,
     1722, 1746, 1737, 1744, 1718, 1725, 1722, 1732, 1719, 1712,
     1737, 1713, 1735, 1734, 1727, 1712, 1721, 1719, 1712, 1718,
       92, 1703, 1701, 1702, 1700, 1723, 1699, 1698, 1710, 1701,
     1712, 1692, 1702, 1694, 1690, 1689, 1693, 1697,   80, 1700,
     1685, 1683, 1678, 1700, 1685, 1690, 1689, 1696,  104, 1682,

     1682, 1685, 1684, 1687,   51, 1671, 1684, 1694, 1693, 1686,
     1671, 1662, 1672, 1668, 1677, 1658, 1657, 1672, 1656, 1663,
     1658, 1655, 1679, 1670, 1650, 1666, 1657, 1664, 1673, 1648,
     1662, 1662, 1659, 1668, 1657, 1649, 1651, 1874, 1654, 1638,
     1874, 1637, 1632, 1646, 1649, 1644, 1650, 1631, 1634, 1631,
     1653, 1621, 1620, 1625, 1626, 1638, 1628, 1636, 1626, 1634,
      102, 1633, 1630, 1641, 1615, 1631, 1638, 1620, 1626, 1621,
     1611, 1619, 1607, 1613, 1603, 1615, 1618, 1616, 1617, 1611,
     1610, 1613, 1612, 1615, 1620, 1619,   83, 1593, 1597, 1597,
     1615, 1605, 1589, 1612, 1601, 1597, 1601, 1590, 1598, 1592,

     1585, 1581, 1597, 1592, 1591, 1575, 1576, 1586, 1568, 1573,
     1572, 1584, 1569, 1582, 1581, 1576, 1569, 1569, 1578, 1563,
     1575, 1570, 1577, 1576,   93, 1558, 1580, 1555, 1564, 1552,
     1563, 1565, 1555, 1553, 1552, 1552, 1556, 1559, 1558, 1548,
     1542, 1565, 1564, 1544, 1538, 1561, 1537, 1552,  109, 1550,
     1547, 1546, 1541, 1537, 1533,   91, 1552, 1533, 1539, 1538,
     1534, 1522, 1532, 1545, 1513, 1524, 1519, 1522, 1517, 1530,
     1524, 1531, 1523, 1535, 1520, 1523, 1513, 1521, 1530, 1529,
     1508, 1503, 1516, 1511, 1512, 1523, 1503, 1498, 1497, 1511,
     1504, 1497,  111, 1506, 1495, 1504, 1483, 1506, 1501, 1491,

     1490, 1494, 1489, 1487, 1482, 1492, 1503, 1495, 1481, 1491,
     1489,  119, 1498, 1480,  127, 1479, 1477, 1477, 1466, 1466,
     1466, 1484, 1475, 1469, 1481, 1460, 1479, 1476, 1477, 1458,
     1473, 1474, 1455, 1468, 1469, 1449, 1475, 1468, 1448, 1447,
      132, 1464, 1446, 1444, 1451, 1453,  134, 1447, 1441, 1441,
     1436, 1452,  136, 1447, 1439, 1434, 1444, 1432, 1456, 1429,
     1429,  133, 1443, 1433, 1442, 1429, 1430, 1425, 1447, 1421,
     1420, 1434, 1418, 1436, 1441, 1416, 1422, 1412, 1417, 1436,
     1412, 1415, 1427, 1412, 1421,  140,  145, 1424, 1409, 1418,
     1421, 1401, 1395, 1400, 1398, 1396, 1398, 1401, 1393, 1412,

     1398, 1392, 1392, 1389, 1413, 1404, 1401, 1404, 1381, 1391,
     1393, 1406,  148, 1379, 1380, 1379, 1392, 1382,  151, 1376,
     1379, 1392, 1383, 1396,  154, 1370, 1394, 1393, 1386, 1391,
     1384, 1364, 1378, 1362, 1367, 1376, 1360, 1383, 1372, 1367,
     1374, 1373, 1354, 1874, 1377, 1376, 1363,  148, 1356, 1344,
     1347, 1343,  155,   51,   77,   96,  113,  137,  159,  141,
      143,  159,  143,  156,  150,  147,  160,  156,  150,  168,
      160,  161,  167,  166,  161,  168,  179,  160,  186,  170,
      178,  189,  170,  168,  188,  191,  172,  188,  200,  193,
      193,  199,  202,  208,  182,  193,  202,  208,  210,  213,

      205,  216,  214,  206,  220,  207,  207,  205,  216,  230,
      231,  232,  210,  211,  216,  219,  220, 1874,  234,  216,
      231,  214,  226,  238,  245,  225,  233,  240,  230,  244,
      226,  238,  243, 1874,  230,  225,  231,  243,  238,  249,
      260,  261,  255,  263,  239,  240,  266,  250,  249,  245,
      250,  267,  262, 1874,  250,  251,  262,  252,  259,  269,
      276,  272,  274,  260,  260,  272,  283,  269,  280,  277,
      266,  290,  292,  292,  296,  279,  289,  301,  295,  308,
      303,  290,  303,  308,  294,  295,  293,  305,  304,  307,
      316,  308,  323,  300,  319,  303,  323,  303,  311,  323,

      318,  317,  334,  315,  313,  337,  338,  329,  320,  322,
      342,  329,  320,  335,  338,  333,  348,  325,  340,  339,
      328,  334,  354,  345,  356,  345,  341,  359,  343,  337,
      362,  345,  350,  338,  355,  344,  337,  363,  366,  369,
      358,  372,  375,  361,  351,  379,  382,  371,  369,  365,
      382,  375,  391,  382,  372,  388,  399,  369,  381,  371,
      396,  404,  381,  381,  404,  385,  399, 1874,  387,  392,
      410,  416,  411,    0,  392,  410,  401,  421,  402,  398,
      406,  402,  403,  407,  420,  419,  430,  431,  412,  433,
      426,  410,  432,  425,  439,  436,  436,  443,  438,  439,

      426,  433,  448,  449,  440,  434,  448,  440,  451,  433,
      448,  455,  451,  451,  450,  450,  465,  460,  467,  462,
      461,  449,  457,  449,  463,  451,  471,  477,  478,  475,
      478, 1874, 1874, 1874,  464,  482,  484,  465,    0,  467,
      492, 1874,  469,  483,  485,  490,  497,  478,  480,  483,
      484,  476,  476,  477,  487,  486, 1874,  503,  484,  487,
      507,  484,  510,  491,  494,  499,  510,  512,  517,  523,
      524,  494,  502,  527,  528,  518,  507,  511,    0,  508,
      510,  509,  510,  513,  518,  524,  539,  530,  537,  539,
      537,  542,  534,  545,  548,  551,  537,  548,  555,  536,

      562,  540,  541,  545,  542,  567,  562,  559,  546,  565,
      562,  567,  547,  575,  570,  577,  574,  555,  557,  583,
      558,  565,  583,  572,  572,  581,  572,  576,  580,  571,
      586,  578,    0,  575,  574,  591,  596,  583,  592,  580,
      602,  602,  605,  588,  593,  609,  611,  614,  597,  612,
      618,  618,  618,  620,  602,  617,  605,    0,  606,  623,
      622,  616,  611,  606,  617,  637,  634,  615,  630,  619,
      643,  630,  639,  619,  643,  646,  638,  627,  654,  628,
      642,  638,  632,  649,  636,  661,  648,  646,  655,  646,
      659,  667,  655,  665,  655,  652,  648,  670,  676,  677,

      653,  669,  655,  681,  682,  663,    0,  660,  660,  662,
      661, 1874,  688,  689,  683,  688,  680,  689,  682,  689,
      673,  682,  700,  697,  679,  679,  701,  698,  685,  696,
      686,  687,  700,  710,  705,  707,  718,  707,  720,  700,
      704,  723,  700,  725,    0,  722,  704,  705,  716,  723,
      726,  706,  734,  721,  736,  727,  730,  731,  717,  737,
      740,  726,  739,  741,  726,  740,  727,  745,  728,  748,
      752,  733,  736,  735,  736,  762,  763,  744,  761,  753,
      768,  763,  753,  767,  750,  774,  762,  752,  773,    0,
      776, 1874,  757,  763,  761,  760,  776,  783,  769,  773,

      767,  775,  776,  784,  791,  797,  773,  773,  780,  778,
      802,  780,  804,  780,  802,  805,  811,  812,  813,  814,
      811,  815,  801,  811,  805,  798,  814,  823,  809,    0,
      820,  811,  829,  831,  834,  840,  822,  822,  818,  821,
      841,  828,  834, 1874,  843,  844,  845,  848,  834,  830,
      832,  851,  830,  849,  856,  848,  859,  855,  862,  864,
      866,  869,  871,  873,  870,  857,  871,  859,  858,  860,
      881,  884,  883,    0,  865,  865,  889,  892,  894,  886,
      901,  878,  880,  904,  905,  882,  883,  884,  893,  907,
      890,  904,  891,  891,  903,  912,  916,  902,  904,  921,

      924,  927,  929,  932,  933,  915,  934,  932,  919, 1874,
      939,  945,  923,  937,  944,  931,  923,  928,  939,  950,
      942,  932,  934,  935,  960,  957,  960,  966,  945,  950,
      957,  947,  957,  970,  973,  960,  971,  977,  980,  982,
      985,  987,  990,  992, 1874,  998,  976,  990,  987,  998,
      990,  982,  997,  993,  988, 1002, 1007,  988, 1001,  991,
     1016, 1003, 1004, 1013, 1016, 1018, 1024,  998, 1006, 1014,
     1028, 1025, 1031, 1032, 1029, 1031, 1033, 1035, 1022, 1019,
     1036, 1041, 1023, 1874, 1034, 1024, 1023, 1025, 1048, 1051,
     1047, 1035, 1049, 1040, 1050, 1051, 1054, 1061, 1053, 1058,

     1050, 1070, 1065, 1068, 1070, 1072, 1064, 1065, 1054, 1077,
     1080, 1061, 1060, 1075, 1079, 1065, 1087, 1070, 1084, 1071,
     1085, 1083, 1084, 1084, 1096, 1099, 1086, 1083, 1107, 1091,
     1100, 1107, 1110, 1097, 1098, 1093, 1115, 1107, 1108, 1123,
     1101, 1115, 1120, 1103, 1128, 1129, 1120, 1121, 1106, 1129,
     1121, 1136, 1133, 1129, 1125, 1137, 1140, 1142, 1145, 1139,
     1140, 1143, 1146, 1146, 1132, 1874, 1133, 1133, 1146, 1142,
     1155, 1139, 1140, 1140, 1140, 1162, 1164, 1146, 1145, 1168,
     1170, 1176, 1177, 1154, 1874, 1153, 1162, 1181, 1168, 1163,
     1175, 1160, 1162, 1163, 1163, 1189, 1186, 1168, 1169, 1190,

     1192, 1874, 1192, 1193, 1196, 1182, 1186, 1187, 1180, 1206,
     1207, 1198, 1205, 1211, 1187, 1209, 1211, 1200, 1195, 1215,
     1202, 1213, 1223, 1201, 1221, 1223, 1211, 1226, 1224, 1223,
     1234, 1210, 1236, 1237, 1213, 1225, 1236, 1238, 1234, 1228,
     1228, 1237, 1248, 1245, 1247, 1240, 1247, 1236, 1250, 1247,
     1231, 1251, 1256, 1259, 1255, 1240, 1242, 1244, 1250, 1260,
     1248, 1268, 1271, 1257, 1253, 1279, 1256, 1256, 1259, 1263,
     1280, 1263, 1277, 1284, 1276, 1291, 1262, 1269, 1264, 1271,
     1292, 1287, 1295, 1301, 1278, 1303, 1874, 1290, 1301, 1293,
     1288, 1292, 1300, 1286, 1285, 1303, 1291, 1305, 1306, 1298,

     1294, 1296, 1297, 1309, 1322, 1317, 1874, 1299, 1319, 1301,
     1314, 1303, 1316, 1316, 1874, 1331, 1326, 1313, 1324, 1316,
     1317, 1318, 1338, 1315, 1331, 1337, 1343, 1345, 1342, 1344,
     1325, 1347, 1340, 1348, 1336, 1356, 1353, 1355, 1874, 1364,
     1366, 1367, 1368, 1370, 1371
    } ;

static yyconst short int yy_def[1546] =
    {   0,
     1539,    1, 1539, 1539, 1539, 1539, 1540, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1540, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1541, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1541, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1542, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1542, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1543, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1543, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1544, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1544,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1545,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1545, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,    0, 1539,
     1539, 1539, 1539, 1539, 1539
    } ;

static yyconst short int yy_nxt[1910] =
    {   0,
        4,    5,    6,    5,    7,    4,    4,    4,    4,    8,
        9,   10,   11,   12,   13,    4,   14,   15,    4,   16,
        4,   17,   18,    4,   19,    4,   20,   21,   22,   23,
        4,   24,    4,    4,    4,   25,   25,   25,   25,   25,
       25,   28,   36,   31,   42,   39,   50,   32,   44,   29,
       33,   48,   37,   34,   49,   45,   35,   40,   75,   52,
       43,   46,  268,   53,  630,   56,  269,   60,   38,   57,
       61,   97,   51,   54,   76,   62,   55,   98,   80,   58,
       25,   25,   25,  144,   86,   59,   81,   87,  100,  134,
       82,  101,  107,  108,  631,  188,  135,  136,  189,  192,

      137,  224,  244,  193,  351,  225,  390,  226,  245,  145,
      352,  422,  190,  391,  194,  255,  415,  415,  323,  256,
      460,  257,  423,  324,  632,  258,  325,  259,  461,  481,
      260,  261,  462,  486,  487,  487,  482,  633,  262,  513,
      513,  519,  519,  525,  525,  483,  534,  559,  559,  634,
      535,  486,  487,  487,  585,  586,  586,  592,  593,  593,
      599,  600,  600,  622,  628,  623,  559,  559,  635,  636,
      637,  638,  629,  639,  640,  641,  642,  643,  644,  645,
      646,  647,  648,  649,  650,  651,  652,  652,  654,  655,
      656,  657,  658,  659,  660,  661,  661,  585,  586,  586,

      662,  663,  653,  664,  665,  666,  667,  667,  592,  593,
      593,  668,  669,  670,  671,  672,  672,  673,  673,  599,
      600,  600,  674,  675,  675,  676,  677,  678,  678,  679,
      680,  681,  682,  683,  684,  685,  686,  687,  688,  689,
      690,  691,  691,  692,  693,  694,  695,  696,  697,  698,
      699,  700,  701,  702,  703,  704,  705,  706,  707,  708,
      709,  710,  711,  712,  713,  714,  715,  716,  717,  718,
      719,  720,  721,  722,  652,  652,  723,  724,  725,  726,
      727,  728,  729,  661,  661,  730,  731,  732,  733,  734,
      667,  667,  735,  736,  737,  738,  739,  740,  740,  673,

      673,  741,  742,  743,  743,  744,  745,  746,  747,  747,
      748,  749,  750,  751,  752,  753,  753,  754,  755,  756,
      757,  758,  759,  691,  691,  760,  761,  762,  763,  764,
      765,  765,  766,  767,  768,  769,  770,  771,  772,  773,
      774,  775,  776,  777,  778,  779,  780,  781,  782,  783,
      784,  785,  786,  787,  788,  789,  790,  791,  792,  793,
      794,  795,  796,  797,  798,  799,  800,  801,  802,  803,
      804,  805,  806,  807,  807,  739,  740,  740,  808,  809,
      809,  742,  743,  743,  810,  811,  812,  812,  746,  747,
      747,  813,  814,  816,  817,  818,  819,  815,  753,  753,

      820,  821,  822,  823,  824,  825,  826,  827,  828,  829,
      830,  831,  831,  832,  833,  834,  835,  836,  836,  837,
      838,  840,  841,  842,  843,  844,  845,  846,  847,  848,
      849,  850,  851,  852,  853,  854,  855,  856,  857,  858,
      858,  859,  860,  861,  861,  862,  863,  864,  865,  866,
      867,  868,  869,  870,  871,  807,  807,  872,  809,  809,
      873,  874,  812,  812,  875,  876,  877,  878,  879,  880,
      881,  882,  883,  884,  885,  886,  887,  888,  889,  889,
      890,  891,  892,  892,  830,  831,  831,  893,  894,  895,
      895,  896,  896,  897,  898,  899,  900,  901,  902,  903,

      904,  905,  906,  907,  908,  909,  910,  911,  912,  913,
      858,  858,  914,  915,  861,  861,  916,  917,  917,  918,
      919,  920,  921,  922,  923,  923,  924,  925,  926,  927,
      928,  929,  930,  931,  932,  934,  935,  936,  937,  938,
      939,  940,  941,  942,  889,  889,  943,  943,  944,  892,
      892,  945,  946,  946,  894,  895,  895,  947,  948,  948,
      949,  950,  951,  951,  952,  953,  954,  955,  956,  957,
      958,  959,  960,  961,  962,  963,  964,  966,  967,  968,
      969,  917,  917,  970,  965,  971,  972,  973,  974,  975,
      976,  976,  977,  978,  979,  980,  981,  982,  984,  985,

      986,  983,  987,  988,  989,  990,  991,  992,  993,  994,
      994,  995,  943,  943,  996,  997,  946,  946,  998,  998,
      947,  948,  948,  999, 1000,  951,  951, 1001, 1002, 1003,
     1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
     1015, 1016, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
     1024, 1024,  975,  976,  976, 1025, 1026, 1027, 1028, 1029,
     1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
     1040, 1041,  994,  994, 1042, 1043, 1044,  998,  998, 1045,
     1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
     1056, 1057, 1058, 1059, 1060, 1061, 1061, 1062, 1063, 1064,

     1065, 1066, 1067, 1068, 1024, 1024, 1069, 1070, 1071, 1071,
     1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1079, 1080,
     1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091,
     1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
     1101, 1102, 1103, 1104, 1105, 1105, 1060, 1061, 1061, 1106,
     1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
     1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1079, 1079,
     1124, 1125, 1126, 1127, 1128, 1128, 1129, 1130, 1131, 1132,
     1133, 1133, 1134, 1135, 1135, 1136, 1137, 1138, 1139, 1140,
     1141, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1105, 1105,

     1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
     1157, 1115, 1116, 1116, 1158, 1159, 1160, 1161, 1162, 1162,
     1163, 1165, 1164, 1164, 1166, 1167, 1169, 1170, 1168, 1171,
     1172, 1172, 1173, 1175, 1176, 1177, 1178, 1178, 1179, 1179,
     1134, 1135, 1135, 1180, 1181, 1182, 1183, 1184, 1141, 1141,
     1185, 1186, 1187, 1188, 1189, 1190, 1190, 1191, 1192, 1193,
     1194, 1195, 1196, 1197, 1197, 1198, 1157, 1157, 1199, 1200,
     1200, 1201, 1201, 1202, 1202, 1203, 1204, 1204, 1164, 1164,
     1164, 1164, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1211,
     1171, 1172, 1172, 1212, 1213, 1214, 1215, 1215, 1177, 1178,

     1178, 1179, 1179, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
     1223, 1224, 1225, 1226, 1227, 1227, 1228, 1229, 1230, 1231,
     1232, 1233, 1234, 1235, 1235, 1236, 1237, 1238, 1239, 1239,
     1240, 1241, 1241, 1242, 1243, 1243, 1244, 1244, 1203, 1204,
     1204, 1245, 1246, 1247, 1248, 1249, 1211, 1211, 1250, 1251,
     1252, 1215, 1215, 1253, 1254, 1255, 1256, 1257, 1257, 1258,
     1261, 1262, 1263, 1264, 1265, 1265, 1226, 1227, 1227, 1266,
     1259, 1260, 1267, 1268, 1269, 1270, 1271, 1272, 1272, 1234,
     1235, 1235, 1273, 1274, 1275, 1275, 1238, 1239, 1239, 1276,
     1276, 1240, 1241, 1241, 1277, 1277, 1242, 1243, 1243, 1244,

     1244, 1278, 1279, 1280, 1281, 1282, 1282, 1283, 1284, 1285,
     1286, 1287, 1288, 1289, 1290, 1290, 1291, 1292, 1293, 1294,
     1295, 1296, 1297, 1265, 1265, 1298, 1298, 1299, 1300, 1301,
     1302, 1303, 1272, 1272, 1304, 1305, 1275, 1275, 1276, 1276,
     1277, 1277, 1306, 1306, 1307, 1308, 1309, 1310, 1311, 1311,
     1312, 1313, 1314, 1315, 1316, 1317, 1317, 1289, 1290, 1290,
     1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1326,
     1327, 1328, 1329, 1330, 1331, 1332, 1332, 1333, 1333, 1306,
     1306, 1334, 1335, 1336, 1337, 1337, 1310, 1311, 1311, 1338,
     1339, 1340, 1341, 1342, 1317, 1317, 1343, 1344, 1345, 1346,

     1347, 1348, 1349, 1350, 1350, 1325, 1326, 1326, 1351, 1352,
     1353, 1354, 1355, 1356, 1357, 1357, 1358, 1359, 1359, 1360,
     1361, 1362, 1337, 1337, 1363, 1364, 1365, 1366, 1367, 1368,
     1369, 1370, 1371, 1372, 1373, 1374, 1350, 1350, 1375, 1376,
     1377, 1377, 1378, 1379, 1380, 1380, 1356, 1357, 1357, 1381,
     1381, 1358, 1359, 1359, 1382, 1383, 1384, 1385, 1386, 1387,
     1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
     1397, 1377, 1377, 1398, 1399, 1380, 1380, 1381, 1381, 1400,
     1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
     1411, 1412, 1413, 1397, 1397, 1414, 1415, 1416, 1416, 1417,

     1417, 1418, 1419, 1420, 1420, 1421, 1422, 1423, 1424, 1425,
     1426, 1427, 1428, 1428, 1429, 1430, 1416, 1416, 1417, 1417,
     1431, 1432, 1420, 1420, 1433, 1434, 1435, 1436, 1437, 1437,
     1438, 1438, 1439, 1428, 1428, 1440, 1441, 1442, 1443, 1444,
     1445, 1446, 1447, 1437, 1437, 1438, 1438, 1448, 1449, 1450,
     1451, 1452, 1453, 1453, 1454, 1454, 1455, 1456, 1457, 1458,
     1459, 1460, 1461, 1453, 1453, 1462, 1463, 1463, 1464, 1465,
     1466, 1467, 1468, 1469, 1470, 1471, 1471, 1462, 1463, 1463,
     1472, 1473, 1474, 1475, 1476, 1477, 1478, 1471, 1471, 1479,
     1480, 1481, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1481,

     1481, 1488, 1489, 1489, 1490, 1491, 1492, 1493, 1489, 1489,
     1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
     1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1514,
     1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
     1525, 1526, 1527, 1528, 1529, 1529, 1530, 1513, 1531, 1529,
     1529, 1532, 1532, 1533, 1532, 1532, 1534, 1535, 1536, 1537,
     1538, 1538, 1538, 1538,   26,   26,   26,  839,  839,  933,
     1007, 1090, 1090, 1174,  627,  626,  625,  624,  621,  620,
      619,  618,  617,  616,  615,  614,  613,  612,  611,  610,
      609,  608,  607,  606,  605,  604,  603,  602,  601,  598,

      597,  596,  595,  594,  591,  590,  589,  588,  587,  584,
      583,  582,  581,  580,  579,  578,  577,  576,  575,  574,
      573,  572,  571,  570,  569,  568,  567,  566,  565,  564,
      563,  562,  561,  560,  558,  557,  556,  555,  554,  553,
      552,  551,  550,  549,  548,  547,  546,  545,  544,  543,
      542,  541,  540,  539,  538,  537,  536,  533,  532,  531,
      530,  529,  528,  527,  526,  524,  523,  522,  521,  520,
      518,  517,  516,  515,  514,  512,  511,  510,  509,  508,
      507,  506,  505,  504,  503,  502,  501,  500,  499,  498,
      497,  496,  495,  494,  493,  492,  491,  490,  489,  488,

      485,  484,  480,  479,  478,  477,  476,  475,  474,  473,
      472,  471,  470,  469,  468,  467,  466,  465,  464,  463,
      459,  458,  457,  456,  455,  454,  453,  452,  451,  450,
      449,  448,  447,  446,  445,  444,  443,  442,  441,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      429,  428,  427,  426,  425,  424,  421,  420,  419,  418,
      417,  416,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,
      396,  395,  394,  393,  392,  389,  388,  387,  386,  385,
      384,  383,  382,  381,  380,  379,  378,  377,  376,  375,

      374,  373,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  359,  358,  357,  356,  355,
      354,  353,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  327,  326,  322,  321,  320,
      319,  318,  317,  316,  315,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  280,
      279,  278,  277,  276,  275,  274,  273,  272,  271,  270,

      267,  266,  265,  264,  263,  254,  253,  252,  251,  250,
      249,  248,  247,  246,  243,  242,  241,  240,  239,  238,
      237,  236,  235,  234,  233,  232,  231,  230,  229,  228,
      227,  223,  222,  221,  220,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  205,
      204,  203,  202,  201,  200,  199,  198,  197,  196,  195,
      191,  187,  186,  185,  184,  183,  182,  181,  180,  179,
      178,  177,  176,  175,  174,  173,  172,  171,  170,  169,
      168,  167,  166,  165,  164,  163,  162,  161,  160,  159,
      158,  157,  156,  155,  154,  153,  152,  151,  150,  149,

      148,  147,  146,  143,  142,  141,  140,  139,  138,  133,
      132,  131,  130,  129,  128,  127,  126,  125,  124,  123,
      122,  121,  120,  119,  118,  117,  116,  115,  114,  113,
      112,  111,  110,  109,  106,  105,  104,  103,  102,   99,
       96,   95,   94,   93,   92,   91,   90,   89,   88,   85,
       84,   83,   79,   78,   77,   74,   73,   72,   71,   70,
       69,   68,   67,   66,   27,   65,   64,   63,   47,   41,
       30,   27, 1539,    3, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539
    } ;

static yyconst short int yy_chk[1910] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    5,    5,    6,    6,
        6,    8,   11,   10,   14,   12,   18,   10,   15,    8,
       10,   17,   11,   10,   17,   15,   10,   12,   37,   19,
       14,   15,  205,   19,  554,   20,  205,   21,   11,   20,
       21,   55,   18,   19,   37,   21,   19,   55,   41,   20,
       25,   25,   25,   96,   45,   20,   41,   45,   57,   89,
       41,   57,   63,   63,  555,  139,   89,   89,  139,  141,

       89,  171,  189,  141,  287,  171,  325,  171,  189,   96,
      287,  356,  139,  325,  141,  199,  349,  349,  261,  199,
      393,  199,  356,  261,  556,  199,  261,  199,  393,  412,
      199,  199,  393,  415,  415,  415,  412,  557,  199,  441,
      441,  447,  447,  453,  453,  412,  462,  486,  486,  558,
      462,  487,  487,  487,  513,  513,  513,  519,  519,  519,
      525,  525,  525,  548,  553,  548,  559,  559,  560,  561,
      562,  563,  553,  564,  565,  566,  567,  568,  569,  570,
      571,  572,  573,  574,  575,  576,  577,  577,  578,  579,
      580,  581,  582,  583,  584,  585,  585,  586,  586,  586,

      587,  588,  577,  589,  590,  591,  592,  592,  593,  593,
      593,  594,  595,  596,  597,  598,  598,  599,  599,  600,
      600,  600,  601,  602,  602,  603,  604,  605,  605,  606,
      607,  608,  609,  610,  611,  612,  613,  614,  615,  616,
      617,  619,  619,  620,  621,  622,  623,  624,  625,  626,
      627,  628,  629,  630,  631,  632,  633,  635,  636,  637,
      638,  639,  640,  641,  642,  643,  644,  645,  646,  647,
      648,  649,  650,  651,  652,  652,  653,  655,  656,  657,
      658,  659,  660,  661,  661,  662,  663,  664,  665,  666,
      667,  667,  668,  669,  670,  671,  672,  672,  672,  673,

      673,  674,  675,  675,  675,  676,  677,  678,  678,  678,
      679,  680,  681,  682,  683,  684,  684,  685,  686,  687,
      688,  689,  690,  691,  691,  692,  693,  694,  695,  696,
      697,  697,  698,  699,  700,  701,  702,  703,  704,  705,
      706,  707,  708,  709,  710,  711,  712,  713,  714,  715,
      716,  717,  718,  719,  720,  721,  722,  723,  724,  725,
      726,  727,  728,  729,  730,  731,  732,  733,  734,  735,
      736,  737,  738,  739,  739,  740,  740,  740,  741,  742,
      742,  743,  743,  743,  744,  745,  746,  746,  747,  747,
      747,  748,  749,  750,  751,  752,  754,  749,  753,  753,

      755,  756,  757,  758,  759,  760,  761,  762,  763,  764,
      765,  765,  765,  766,  767,  769,  770,  771,  771,  772,
      773,  775,  776,  777,  778,  779,  780,  781,  782,  783,
      784,  785,  786,  787,  788,  789,  790,  791,  792,  793,
      793,  794,  795,  796,  796,  797,  798,  799,  800,  801,
      802,  803,  804,  805,  806,  807,  807,  808,  809,  809,
      810,  811,  812,  812,  813,  814,  815,  816,  817,  818,
      819,  820,  821,  822,  823,  824,  825,  826,  827,  827,
      828,  829,  830,  830,  831,  831,  831,  835,  836,  836,
      836,  837,  837,  838,  840,  841,  843,  844,  845,  846,

      847,  848,  849,  850,  851,  852,  853,  854,  855,  856,
      858,  858,  859,  860,  861,  861,  862,  863,  863,  864,
      865,  866,  867,  868,  869,  869,  870,  871,  872,  873,
      874,  875,  876,  877,  878,  880,  881,  882,  883,  884,
      885,  886,  887,  888,  889,  889,  890,  890,  891,  892,
      892,  893,  894,  894,  895,  895,  895,  896,  896,  896,
      897,  898,  899,  899,  900,  901,  902,  903,  904,  905,
      906,  907,  908,  909,  910,  911,  912,  913,  914,  915,
      916,  917,  917,  918,  912,  919,  920,  921,  922,  923,
      923,  923,  924,  925,  926,  927,  928,  929,  930,  931,

      932,  929,  934,  935,  936,  937,  938,  939,  940,  941,
      941,  942,  943,  943,  944,  945,  946,  946,  947,  947,
      948,  948,  948,  949,  950,  951,  951,  952,  953,  954,
      955,  956,  957,  959,  960,  961,  962,  963,  964,  965,
      966,  967,  967,  968,  969,  970,  971,  972,  973,  974,
      975,  975,  976,  976,  976,  977,  978,  979,  980,  981,
      982,  983,  984,  985,  986,  987,  988,  989,  990,  991,
      992,  993,  994,  994,  995,  996,  997,  998,  998,  999,
     1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010,
     1011, 1013, 1014, 1015, 1016, 1016, 1016, 1017, 1018, 1019,

     1020, 1021, 1022, 1023, 1024, 1024, 1025, 1026, 1027, 1027,
     1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1034, 1035,
     1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046,
     1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
     1056, 1057, 1058, 1059, 1060, 1060, 1061, 1061, 1061, 1062,
     1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1071,
     1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1079,
     1080, 1081, 1082, 1083, 1084, 1084, 1085, 1086, 1087, 1088,
     1089, 1089, 1091, 1091, 1091, 1093, 1094, 1095, 1096, 1097,
     1098, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1105,

     1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
     1115, 1116, 1116, 1116, 1117, 1118, 1119, 1120, 1121, 1121,
     1122, 1123, 1122, 1122, 1124, 1125, 1126, 1127, 1125, 1128,
     1128, 1128, 1129, 1131, 1132, 1133, 1133, 1133, 1134, 1134,
     1135, 1135, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1141,
     1142, 1143, 1145, 1146, 1147, 1148, 1148, 1149, 1150, 1151,
     1152, 1153, 1154, 1155, 1155, 1156, 1157, 1157, 1158, 1159,
     1159, 1160, 1160, 1161, 1161, 1162, 1162, 1162, 1163, 1163,
     1164, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1171,
     1172, 1172, 1172, 1173, 1175, 1176, 1177, 1177, 1178, 1178,

     1178, 1179, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
     1187, 1188, 1189, 1190, 1190, 1190, 1191, 1192, 1193, 1194,
     1195, 1196, 1197, 1197, 1197, 1198, 1199, 1200, 1200, 1200,
     1201, 1201, 1201, 1202, 1202, 1202, 1203, 1203, 1204, 1204,
     1204, 1205, 1206, 1207, 1208, 1209, 1211, 1211, 1212, 1213,
     1214, 1215, 1215, 1216, 1217, 1218, 1219, 1220, 1220, 1221,
     1222, 1223, 1224, 1225, 1226, 1226, 1227, 1227, 1227, 1228,
     1221, 1221, 1229, 1230, 1231, 1232, 1233, 1234, 1234, 1235,
     1235, 1235, 1236, 1237, 1238, 1238, 1239, 1239, 1239, 1240,
     1240, 1241, 1241, 1241, 1242, 1242, 1243, 1243, 1243, 1244,

     1244, 1246, 1247, 1248, 1249, 1250, 1250, 1251, 1252, 1253,
     1254, 1255, 1256, 1257, 1257, 1257, 1258, 1259, 1260, 1261,
     1262, 1263, 1264, 1265, 1265, 1266, 1266, 1267, 1268, 1269,
     1270, 1271, 1272, 1272, 1273, 1274, 1275, 1275, 1276, 1276,
     1277, 1277, 1278, 1278, 1279, 1280, 1281, 1282, 1282, 1282,
     1283, 1285, 1286, 1287, 1288, 1289, 1289, 1290, 1290, 1290,
     1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1298, 1298,
     1299, 1300, 1301, 1302, 1303, 1304, 1304, 1305, 1305, 1306,
     1306, 1307, 1308, 1309, 1310, 1310, 1311, 1311, 1311, 1312,
     1313, 1314, 1315, 1316, 1317, 1317, 1318, 1319, 1320, 1321,

     1322, 1323, 1324, 1325, 1325, 1326, 1326, 1326, 1327, 1328,
     1329, 1330, 1331, 1332, 1332, 1332, 1333, 1333, 1333, 1334,
     1335, 1336, 1337, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
     1344, 1345, 1346, 1347, 1348, 1349, 1350, 1350, 1351, 1352,
     1353, 1353, 1354, 1355, 1356, 1356, 1357, 1357, 1357, 1358,
     1358, 1359, 1359, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
     1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
     1376, 1377, 1377, 1378, 1379, 1380, 1380, 1381, 1381, 1382,
     1383, 1384, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
     1394, 1395, 1396, 1397, 1397, 1398, 1399, 1400, 1400, 1401,

     1401, 1403, 1404, 1405, 1405, 1406, 1407, 1408, 1409, 1410,
     1411, 1412, 1413, 1413, 1414, 1415, 1416, 1416, 1417, 1417,
     1418, 1419, 1420, 1420, 1421, 1422, 1423, 1424, 1425, 1425,
     1426, 1426, 1427, 1428, 1428, 1429, 1430, 1431, 1432, 1433,
     1434, 1435, 1436, 1437, 1437, 1438, 1438, 1439, 1440, 1441,
     1442, 1443, 1444, 1444, 1445, 1445, 1446, 1447, 1448, 1449,
     1450, 1451, 1452, 1453, 1453, 1454, 1454, 1454, 1455, 1456,
     1457, 1458, 1459, 1460, 1461, 1462, 1462, 1463, 1463, 1463,
     1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1471, 1472,
     1473, 1474, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,

     1481, 1482, 1483, 1483, 1484, 1485, 1486, 1488, 1489, 1489,
     1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
     1500, 1501, 1502, 1503, 1504, 1505, 1506, 1508, 1509, 1510,
     1511, 1512, 1513, 1514, 1516, 1517, 1518, 1519, 1520, 1521,
     1522, 1523, 1524, 1525, 1526, 1526, 1527, 1509, 1528, 1529,
     1529, 1530, 1530, 1531, 1532, 1532, 1533, 1534, 1535, 1536,
     1537, 1537, 1538, 1538, 1540, 1540, 1540, 1541, 1541, 1542,
     1543, 1544, 1544, 1545,  552,  551,  550,  549,  547,  546,
      545,  543,  542,  541,  540,  539,  538,  537,  536,  535,
      534,  533,  532,  531,  530,  529,  528,  527,  526,  524,

      523,  522,  521,  520,  518,  517,  516,  515,  514,  512,
      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  495,  494,  493,  492,
      491,  490,  489,  488,  485,  484,  483,  482,  481,  480,
      479,  478,  477,  476,  475,  474,  473,  472,  471,  470,
      469,  468,  467,  466,  465,  464,  463,  461,  460,  459,
      458,  457,  456,  455,  454,  452,  451,  450,  449,  448,
      446,  445,  444,  443,  442,  440,  439,  438,  437,  436,
      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  419,  418,  417,  416,

      414,  413,  411,  410,  409,  408,  407,  406,  405,  404,
      403,  402,  401,  400,  399,  398,  397,  396,  395,  394,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  355,  354,  353,  352,
      351,  350,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  324,  323,  322,  321,  320,
      319,  318,  317,  316,  315,  314,  313,  312,  311,  310,

      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
      289,  288,  286,  285,  284,  283,  282,  281,  280,  279,
      278,  277,  276,  275,  274,  273,  272,  271,  270,  269,
      268,  267,  266,  265,  264,  263,  262,  260,  259,  258,
      257,  256,  255,  254,  253,  252,  251,  250,  249,  248,
      247,  246,  245,  244,  243,  242,  240,  239,  237,  236,
      235,  234,  233,  232,  231,  230,  229,  228,  227,  226,
      225,  224,  223,  222,  221,  220,  219,  218,  217,  216,
      215,  214,  213,  212,  211,  210,  209,  208,  207,  206,

      204,  203,  202,  201,  200,  198,  197,  196,  195,  194,
      193,  192,  191,  190,  188,  187,  186,  185,  184,  183,
      182,  181,  180,  179,  178,  177,  176,  175,  174,  173,
      172,  170,  169,  168,  167,  166,  165,  164,  163,  162,
      161,  160,  159,  158,  157,  156,  155,  154,  153,  152,
      151,  150,  149,  148,  147,  146,  145,  144,  143,  142,
      140,  138,  137,  136,  135,  134,  133,  132,  131,  130,
      129,  128,  127,  126,  125,  124,  123,  122,  121,  120,
      119,  118,  117,  116,  115,  114,  113,  112,  111,  110,
      109,  108,  107,  106,  105,  104,  103,  102,  101,  100,

       99,   98,   97,   95,   94,   93,   92,   91,   90,   88,
       87,   86,   85,   84,   83,   82,   81,   80,   79,   78,
       77,   76,   75,   74,   73,   72,   71,   70,   69,   68,
       67,   66,   65,   64,   62,   61,   60,   59,   58,   56,
       54,   53,   52,   51,   50,   49,   48,   47,   46,   44,
       43,   42,   40,   39,   38,   36,   35,   34,   33,   32,
       31,   30,   29,   28,   26,   24,   23,   22,   16,   13,
        9,    7,    3, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lex_conf.l"
#define INITIAL 0
#line 2 "lex_conf.l"
#include <math.h>
#include <ctype.h>
#include <stdlib.h>

#include "configManagement.h"
#include "attributesInfo.h"
#include "random.h"
#include "messageBuffer.h"

char *charFilter(char *string);
extern configManagement cm;
extern attributesInfo ai;
extern Random rnd;
extern messageBuffer mb;


#line 1317 "lex.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 23 "lex_conf.l"


#line 1471 "lex.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1540 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1874 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 25 "lex_conf.l"
{
/*	int atributs=atoi(charFilter(yytext));
	ai.setNumAttributes(atributs);
	mb.printf("Number of attributes in domain:%d\n"
		,atoi(charFilter(yytext)));*/
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 32 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_CROSSOVER);
	mb.printf("Crossover probability: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 37 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),POP_SIZE);
	mb.printf("Popsize: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),ITERATIONS);
	mb.printf("GA Iterations:%f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 47 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext))
		,INITIALIZATION_MIN_CLASSIFIERS);
	mb.printf("Minumum number of classifiers per individual in initialization:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 53 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext))
		,INITIALIZATION_MAX_CLASSIFIERS);
	mb.printf("Maximum number of classifiers per individual in initialization:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 60 "lex_conf.l"
{
	cm.setParameter(1,IGNORE_MISSING_VALUES);
	mb.printf("Ignore missing values\n");
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "lex_conf.l"
{
	cm.setParameter(1,DUMP_EVOLUTION_STATS);
	mb.printf("Dump learning process statistics at each iteration\n");
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "lex_conf.l"
{
	if(!strcasecmp(yytext+20,"TOURNAMENT")) {
		cm.setParameter(TOURNAMENT_SELECTION,SELECTION_ALGORITHM);	
		mb.printf("Tournament Selection Algorithm\n");
	} else if(!strcasecmp(yytext+20,"TOURNAMENTWOR")) {
		cm.setParameter(TOURNAMENT_WOR_SELECTION,SELECTION_ALGORITHM);	
		mb.printf("Tournament Selection without replacement Algorithm\n");
	} else if(!strcasecmp(yytext+20,"PARETO")) {
		cm.setParameter(PARETO_SELECTION,SELECTION_ALGORITHM);	
		mb.printf("Pareto Selection Algorithm\n");
	} else {
		mb.printf("Unknown selection algorithm:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 86 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),TOURNAMENT_SIZE);
	mb.printf("Tournament size:%f\n",atof(charFilter(yytext)));
}									       
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 91 "lex_conf.l"
{
	cm.setParameter(1,SHOW_FRONTS);
	mb.printf("Show Pareto Fronts\n");
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 96 "lex_conf.l"
{
	if(!strcasecmp(&yytext[19],"1PX")) {
		cm.setParameter(CROSS_1P,CROSSOVER_OPERATOR);
		mb.printf("One Point Crossover\n");
	} else if(!strcasecmp(&yytext[19],"2PX")) {
		cm.setParameter(CROSS_2P,CROSSOVER_OPERATOR);
		mb.printf("Two Points Crossover\n");
	} else if(!strcasecmp(&yytext[19],"INFORMED")) {
		cm.setParameter(CROSS_INFORMED,CROSSOVER_OPERATOR);
		mb.printf("Informed Crossover\n");
	} else {
		mb.printf("Unknown crossover operator:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 112 "lex_conf.l"
{
	if(!strcasecmp(yytext+17,"ACCURACY")) {
		cm.setParameter(MAXIMIZE,MAX_MIN);
		cm.setParameter(ACCURACY,FITNESS_FUNCTION);
		mb.printf("Squared accuracy fitness function\n");
	} else if(!strcasecmp(yytext+17,"MDL")) {
		cm.setParameter(MINIMIZE,MAX_MIN);
		cm.setParameter(MDL,FITNESS_FUNCTION);
		mb.printf("MDL fitness function\n");
	} else {
		mb.printf("Unknown fitness function:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,MDL_WEIGHT);
	mb.printf("MDL fixed weight %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 133 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,MDL_WEIGHT_RELAX_FACTOR);
	mb.printf("MDL Weight relax factor %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 138 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),MDL_INITIAL_TL_RATIO);
	mb.printf("Initial theory length proportion in MDL formula: %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 143 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),MDL_ITERATION);
	mb.printf("Iteracio activacio MDL %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 148 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PRUNING_ITERATION);
	mb.printf("Pruning operator activated at iteration:%f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 153 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PRUNING_MIN_CLASSIFIERS);
	mb.printf("Pruning stops if #classifiers is less that %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 158 "lex_conf.l"
{
	cm.setParameter(1,PRUNING_AUTO_THRESHOLD);
	mb.printf("The number of min classifiers is automatically set\n");
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 162 "lex_conf.l"
{
	cm.setParameter(1,PRUNING_AUTO_THRESHOLD2);
	mb.printf("The number of min classifiers is automatically set2\n");
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 167 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),PRUNING_AUTO_OFFSET);
	mb.printf("The min classifiers offset %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 172 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_INDIVIDUAL_MUTATION);
	mb.printf("Individual-wise mutation probability:%f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 177 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,HIERARCHICAL_SELECTION_ITERATION);
	mb.printf("Hierarchical selection activated, starting at iteration %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 183 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),HIERARCHICAL_SELECTION_THRESHOLD);
	mb.printf("Hierarchical selection threshold :%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 189 "lex_conf.l"
{
	cm.setParameter(1,HIERARCHICAL_SELECTION_USES_MDL);
	mb.printf("Hierarchical selection uses MDL Theory Length\n");
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 194 "lex_conf.l"
{
	cm.setParameter(1,CHECK_WINDOWING);
	mb.printf("Performance tests of windowing enabled");
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 199 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),WINDOWING_ILAS);
	mb.printf("ILAS Windowing of degree %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 204 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),WINDOWING_GWS);
	mb.printf("GWS Windowing of degree %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 210 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_ONE);
	mb.printf("Probability of value ONE for GABIL and ADI KR:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 216 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_SHARP);
	mb.printf("Probability of value Sharp for LCS/Instances KR:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 222 "lex_conf.l"
{
	cm.setParameter(1,KR_ADI);
	mb.printf("Using Adaptive Discretization Intervals Knowledge Representation\n");
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 227 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_MERGE);
	mb.printf("Probability of merge operator in ADI KR: %f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 233 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_SPLIT);
	mb.printf("Probability of split operator in ADI KR: %f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 239 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_REINITIALIZE);
	mb.printf("Probability of reinitialize operator in ADI KR: %f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 245 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_REINITIALIZE_AT_END);
	mb.printf("Probability of reinitialize operator at final iteration in ADI KR:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 251 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),MAX_INTERVALS);
	mb.printf("Maximum number of intervals per attribute in ADI KR:%d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 257 "lex_conf.l"
{
	cm.setParameter(1,KR_HYPERRECT);
	mb.printf("Using HYPERRECT Knowledge Representation\n");
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 262 "lex_conf.l"
{
	cm.setParameter(1,KR_LCS);
	mb.printf("Using LCS Knowledge Representation\n");
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 267 "lex_conf.l"
{
	cm.setParameter(1,KR_INSTANCE_SET);
	mb.printf("Using Instance Set/1-NN Knowledge Representation\n");
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 272 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,ALPHA_OF_BLX);
	mb.printf("Using BLX crossover with alpha:%f\n" 
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 278 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,D_OF_FR);
	mb.printf("Using FR crossover with D:%f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 283 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,N_OF_SBX);
	mb.printf("Using SBX crossover with N:%f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 288 "lex_conf.l"
{
	rnd.setSeed((unsigned long int)atof(charFilter(yytext)));
	mb.printf("Random seed specified:%s\n",yytext+12);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 293 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),PENALIZE_MIN_SIZE);
	mb.printf("Penalize the individuals that have a size less than %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 299 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),PENALIZE_MIN_SIZE_AT_END);
	mb.printf("Penalize the individuals that have a size less than %d at end\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 305 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PARETO_SELECTION_ITERATION);
	mb.printf("Pareto selection activated, starting at iteration %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 312 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)) ,TOTAL_TIME);
	mb.printf("Time spent on the learning process %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 318 "lex_conf.l"
{
	if(!strcasecmp(yytext+14,"MAJOR")) {
		cm.setParameter(MAJOR,DEFAULT_CLASS);
		mb.printf("Majoritarian class will be default\n");
	} else if(!strcasecmp(yytext+14,"MINOR")) {
		cm.setParameter(MINOR,DEFAULT_CLASS);
		mb.printf("Minoritarian class will be default\n");
	} else if(!strcasecmp(yytext+14,"DISABLED")) {
		cm.setParameter(DISABLED,DEFAULT_CLASS);
		mb.printf("Default class disabled\n");
	} else if(!strcasecmp(yytext+14,"AUTO")) {
		cm.setParameter(AUTO,DEFAULT_CLASS);
		mb.printf("Automatical determination of default class\n");
	} else if(!strcasecmp(yytext+14,"AUTO2")) {
		cm.setParameter(AUTO,DEFAULT_CLASS);
		cm.setParameter(1,HARD_NICHING_DISABLE);
		mb.printf("Automatical determination of default class with alternative niching disabling code\n");
         } else if(!strcasecmp(yytext+14,"FIXED")) {
                cm.setParameter(FIXED,DEFAULT_CLASS);
                mb.printf("Default class fixed\n");
         } else {
                mb.printf("Unknown default class policy:%s\n",yytext);
                exit(1);
	}
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 344 "lex_conf.l"
{
        cm.setParameter(atoi(charFilter(yytext)) ,FIXED_DEFAULT_CLASS);
        mb.printf("User fixed default class %d\n"
                   ,atoi(charFilter(yytext)));
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 350 "lex_conf.l"
{
	cm.setParameter(1 ,SMART_INIT);
	mb.printf("Initialization uses examples to create the initial rules\n");
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 355 "lex_conf.l"
{
	cm.setParameter(1 ,CLASS_WISE_INIT);
	mb.printf("Instances used in initialization are sampled with uniform class distribution\n");
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 360 "lex_conf.l"
{
	cm.setParameter(1 ,CLASS_WISE_ACC);
	mb.printf("Training accuracy computation will be class-wise\n");
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 366 "lex_conf.l"
{
	cm.setParameter(1 ,DUMP_ACTIVATION);
	mb.printf("Dump average activation after initialization\n");
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 372 "lex_conf.l"
{
	 if(!strcasecmp(yytext+15,"FTB")) {
		cm.setParameter(FTB,PRUNING_POLICY);
		mb.printf("Rule pruning policy is front to back\n");
	} else if(!strcasecmp(yytext+15,"BTF")) {
		cm.setParameter(BTF,PRUNING_POLICY);
		mb.printf("Rule pruning policy is back to front\n");
	} else if(!strcasecmp(yytext+15,"RANDOM")) {
		cm.setParameter(RANDOM,PRUNING_POLICY);
		mb.printf("Rule pruning policy is random\n");
	} else {
		mb.printf("Unknown pruning policy:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 389 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_SMART_CROSSOVER);
	mb.printf("Smart crossover probability: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 394 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),NUM_PARENTS_SMART_CROSSOVER);
	mb.printf("Number of parents in smart crossover: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 400 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),FILTER_SMART_CROSSOVER);
	mb.printf("Smart crossover filter threshold: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 406 "lex_conf.l"
{
	cm.setParameter(1,ADD_RULES_SMART_CROSSOVER);
	mb.printf("Smart crossover adds new rules\n");
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 411 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),REPETITIONS_RULE_ORDERING);
	mb.printf("Number of repetitions of the rule ordering process in SmartX: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 416 "lex_conf.l"
{
	cm.setParameter(1,ELITISM_WITH_SMART_CROSSOVER);
	mb.printf("Elitism stage will use smart crossover\n");
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 420 "lex_conf.l"
{
	cm.setParameter(1,ELITISM_LAST_ITERATION_WITH_SMART_CROSSOVER);
	mb.printf("Last iteration of elitism stage will use smart crossover\n");
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 426 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),RULE_CLEANING_PROB);
	mb.printf("Rule cleaning probability : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 431 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),RULE_GENERALIZING_PROB);
	mb.printf("Rule generalizing probability : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 437 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),DUMP_GENOTYPE_ITERATIONS);
	mb.printf("Genotype of best individual is dumped every %d iterations\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 442 "lex_conf.l"
{
	mb.enable();
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 446 "lex_conf.l"
{
	mb.printf("Crossover will use informed cut points (cutPoints.dat)\n");
	cm.setParameter(1,INFORMED_CROSSOVER);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 451 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),COVERAGE_INIT);
	mb.printf("Coverage ratio in initialization : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 456 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),EXPRESSED_ATT_INIT);
	mb.printf("Number of expressed attributes in initialization : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 462 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),COVERAGE_BREAKPOINT);
	mb.printf("Coverage breakpoint for MDL fitness : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 467 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),COVERAGE_RATIO);
	mb.printf("Coverage ratio for MDL fitness : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 473 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),REPETITIONS_RULE_LEARNING);
	mb.printf("Number of times we will try to learn a rule from the current training set: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 478 "lex_conf.l"
{
	mb.printf("Intervalar representation will use rotations\n");
	cm.setParameter(1,ROTATE_HYPERRECTANGLES);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 483 "lex_conf.l"
{
	mb.printf("Only a subset of attributes will be rotated (rotatedAttributes.dat)\n");
	cm.setParameter(1,RESTRICTED_ROTATED_ATTRIBUTES);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 489 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_0ANGLE_INIT);
	mb.printf("Probability of setting an angle to 0 degrees in initialization: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 494 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_0ANGLE_MUT);
	mb.printf("Probability of setting an angle to 0 degrees in mutation: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 499 "lex_conf.l"
{
	mb.printf("Hyperrectangle attribute list knowledge representation\n");
	cm.setParameter(1,HYPERRECT_LIST);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 504 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_GENERALIZE_LIST);
	mb.printf("Probability of generalizing the hyperrect list KR: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 508 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_SPECIALIZE_LIST);
	mb.printf("Probability of specializing the hyperrect list KR: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 513 "lex_conf.l"
{
	mb.printf("Using the coverage breakpoint adjustment heuristic\n");
        cm.setParameter(1,COVERAGE_BREAK_HEURISTIC);
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 519 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),ITERATIONS_COVADJ);
	mb.printf("Number of iterations of the coverage break adjustement heuristic: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 524 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),POPULATIONS_COVADJ);
	mb.printf("Number of populations used in the coverage break adjustement heuristic: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 529 "lex_conf.l"
{
        cm.setParameter(atof(charFilter(yytext)),NUM_ATTS_K);
        mb.printf("Expected number of attributes: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 534 "lex_conf.l"
{
        cm.setParameter(atof(charFilter(yytext)),DEVICE_SELECTED);
        mb.printf("Device selected through configuration: %f\n",atof(charFilter(yytext)));

}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 540 "lex_conf.l"
{
        cm.setParameter(atof(charFilter(yytext)),PERC_DEVICE_MEM);
        mb.printf("Percentage of device memory used: %f\n",atof(charFilter(yytext)));

}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 546 "lex_conf.l"
{
        mb.printf("CUDA Enabled fitness function activated\n");
        cm.setParameter(1,CUDA_ENABLED);
}
	YY_BREAK
case 87:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 556 "lex_conf.l"
/* eat up one-line comments */
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 558 "lex_conf.l"
/* eat up whitespace */
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 560 "lex_conf.l"
mb.printf( "Unrecognized character: %s\n", yytext );
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 562 "lex_conf.l"
ECHO;
	YY_BREAK
#line 2353 "lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1540 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1540 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1539);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 562 "lex_conf.l"

int yywrap ()
{
	return 1;
}

char *charFilter(char *string)
{
	while(*string && !(isdigit(*string) || *string=='-')) string++;
	return string;
}

void parseConfig(char *configFile)
{
	int i;

	yyin = fopen( configFile, "r" );
	yylex();
}								 
